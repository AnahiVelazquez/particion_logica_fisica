

****************************************PARTICIO LOGICA***************************************************************


postgres=# create database partition_logic;
CREATE DATABASE
postgres=# \c partition_logic
You are now connected to database "partition_logic" as user "postgres".
partition_logic=# CREATE TABLE my_partitioned_table (
id INT,
name TEXT,
created_at TIMESTAMP
) PARTITION BY RANGE (created_at);
CREATE TABLE
partition_logic=# CREATE TABLE my_partitioned_table_partition_1 PARTITION OF my_partitoned_table FOR VALUES FROM ('2022-01-01') TO ('2022-06-30');
ERROR:  relation "my_partitoned_table" does not exist
partition_logic=# CREATE TABLE my_partitioned_table_partition_1 PARTITION OF
my_partitioned_table
FOR VALUES FROM ('2022-01-01') TO ('2022-06-30');
CREATE TABLE
partition_logic=# CREATE TABLE my_partitioned_table_partition_2 PARTITION OF
my_partitioned_table
FOR VALUES FROM ('2022-07-01') TO ('2022-12-31');
CREATE TABLE
partition_logic=# \dt
                            List of relations
 Schema |               Name               |       Type        |  Owner   
--------+----------------------------------+-------------------+----------
 public | my_partitioned_table             | partitioned table | postgres
 public | my_partitioned_table_partition_1 | table             | postgres
 public | my_partitioned_table_partition_2 | table             | postgres
(3 rows)

partition_logic=# ALTER TABLE my_partitioned_table_partition_1 ADD CONSTRAINT partition_1_check CHECK (created_at >= '2022-01-01' AND created_at <= '2022-06-30');
ALTER TABLE
partition_logic=# ALTER TABLE my_partitioned_table_partition_2 ADD CONSTRAINT partition_2_check CHECK (created_at >= '2022-07-01' AND created_at <= '2022-12-31');
ALTER TABLE
partition_logic=# INSERT INTO my_partitioned_table (id, name, created_at)
VALUES (1, 'John', '2022-03-15');
INSERT 0 1
partition_logic=# NSERT INTO my_partitioned_table (id, name, created_at)
VALUES (2, 'Jane', '2022-09-01');
ERROR:  syntax error at or near "NSERT"
LINE 1: NSERT INTO my_partitioned_table (id, name, created_at)
        ^
partition_logic=# INSERT INTO my_partitioned_table (id, name, created_at)
VALUES (2, 'Jane', '2022-09-01');
INSERT 0 1
partition_logic=# select * from my_partitioned_table;
 id | name |     created_at      
----+------+---------------------
  1 | John | 2022-03-15 00:00:00
  2 | Jane | 2022-09-01 00:00:00
(2 rows)

partition_logic=# select * from my_partitioned_table_partition_1;
 id | name |     created_at      
----+------+---------------------
  1 | John | 2022-03-15 00:00:00
(1 row)

partition_logic=# select * from my_partitioned_table_partition_2;
 id | name |     created_at      
----+------+---------------------
  2 | Jane | 2022-09-01 00:00:00
(1 row)

partition_logic=# 






**************************************************particio fisica*************************************************************************

ilse@ilse-HP-Laptop-15-bs0xx:~$ sudo su postgres
[sudo] contraseña para ilse: 
Lo siento, pruebe otra vez.
[sudo] contraseña para ilse: 
postgres@ilse-HP-Laptop-15-bs0xx:/home/ilse$ cd
postgres@ilse-HP-Laptop-15-bs0xx:~$ psql
psql (14.8 (Ubuntu 14.8-0ubuntu0.22.04.1))
Type "help" for help.

postgres=# create dataase particion_fisica;
ERROR:  syntax error at or near "dataase"
LINE 1: create dataase particion_fisica;
               ^
postgres=# create database particion_fisica;
CREATE DATABASE
postgres=# \c particion_fisica
You are now connected to database "particion_fisica" as user "postgres".
particion_fisica=# create table sales(org int,name varchar(10));
CREATE TABLE
particion_fisica=# create table sales_part1 (CHECK (org < 6)) INHERITS (sales);
CREATE TABLE
particion_fisica=# create table sales_part2 (CHECK (org >=6 and org <=10)) INHERITS (sales);
CREATE TABLE
particion_fisica=# \dt
            List of relations
 Schema |    Name     | Type  |  Owner   
--------+-------------+-------+----------
 public | sales       | table | postgres
 public | sales_part1 | table | postgres
 public | sales_part2 | table | postgres
(3 rows)

particion_fisica=# create or replace rule insert_seles_p1 AS ON INSERT TO sales where (org <6) do instead INSERT INTO sales_part1 values (new.org,new.name);
CREATE RULE
particion_fisica=# create or replace rule insert_seles_p2 AS ON INSERT TO sales where (org >=6 AND org <=10) do instead INSERT INTO sales_part2 values (new.org,new.name);
CREATE RULE
particion_fisica=# insert into sales values (1,'Craig');INSERT 0 0
particion_fisica=# insert into sales values (2,'Mike');
INSERT 0 0
particion_fisica=# insert into sales values (3,'Michelle');
INSERT 0 0
particion_fisica=# insert into sales values (4,'Joe');
INSERT 0 0
particion_fisica=# insert into sales values (5,'Scott');
INSERT 0 0
particion_fisica=# insert into sales values (6,'Roger');
INSERT 0 0
particion_fisica=# insert into sales values (7,'Fred');
INSERT 0 0
particion_fisica=# insert into sales values (8,'Sam');
INSERT 0 0
particion_fisica=# select * from sales;
 org |   name   
-----+----------
   1 | Craig
   2 | Mike
   3 | Michelle
   4 | Joe
   5 | Scott
   6 | Roger
   7 | Fred
   8 | Sam
(8 rows)

particion_fisica=# select * from sales_part1;
 org |   name   
-----+----------
   1 | Craig
   2 | Mike
   3 | Michelle
   4 | Joe
   5 | Scott
(5 rows)

particion_fisica=# select * from sales_part2;
 org | name  
-----+-------
   6 | Roger
   7 | Fred
   8 | Sam
(3 rows)

particion_fisica=# select count (*) from sales;
 count 
-------
     8
(1 row)

particion_fisica=# \c postgres
You are now connected to database "postgres" as user "postgres".
postgres=# create database particion_con_datos;
CREATE DATABASE
postgres=# \c particion_con_datos
You are now connected to database "particion_con_datos" as user "postgres".
particion_con_datos=# CREATE TABLE my_partitioned_table2 (
id INT,
name TEXT,
created_at TIMESTAMP
);
CREATE TABLE
particion_con_datos=# insert into my_partitioned_table2 values (1,'luis','2022-06-30');
INSERT 0 1
particion_con_datos=# insert into my_partitioned_table2 values (2,'anahi','2022-01-05');
INSERT 0 1
particion_con_datos=# insert into my_partitioned_table2 values (3,'teresa','2022-02-07');
INSERT 0 1
particion_con_datos=# insert into my_partitioned_table2 values (4,'alexis','2022-03-14');
INSERT 0 1
particion_con_datos=# insert into my_partitioned_table2 values (5,'ximena','2022-04-22');
INSERT 0 1
particion_con_datos=# insert into my_partitioned_table2 values (6,'andrea','2022-05-12');
INSERT 0 1
particion_con_datos=# insert into my_partitioned_table2 values (7,'raul','2022-07-08');
INSERT 0 1
particion_con_datos=# insert into my_partitioned_table2 values (8,'rodolfo','2022-08-02');
INSERT 0 1
particion_con_datos=# insert into my_partitioned_table2 values (9,'alondra','2022-09-17');
INSERT 0 1
particion_con_datos=# insert into my_partitioned_table2 values (10,'esteban','2022-10-27');
INSERT 0 1
particion_con_datos=# insert into my_partitioned_table2 values (11,'erick','2022-11-04');
INSERT 0 1
particion_con_datos=# insert into my_partitioned_table2 values (12,'dulce','2022-12-13');
particion_con_datos=# CREATE TABLE my_partitioned_table_partitioparticion_con_datos=# CREATE TABLE my_partitioned_table_partition_1 ((1 ((
CHECK (created_at >= '2022-01-01' AND created_at <
'2022-07-01')
) INHERITS (my_partitioned_table2);
CREATE TABLE
particion_con_datos=# CREATE TABLE my_partitioned_table_partition_2 (
CHECK (created_at >= '2022-07-01' AND created_at <
'2023-01-01')
) INHERITS (my_partitioned_table2);
CREATE TABLE
particion_con_datos=# INSERT INTO my_partitioned_table_partition_1 (id, name,
created_at)
SELECT id, name, created_at
FROM my_partitioned_table2
WHERE created_at >= '2022-01-01' AND created_at <
'2022-07-01';
INSERT 0 6
particion_con_datos=# INSERT INTO my_partitioned_table_partition_2 (id, name,
created_at)
SELECT id, name, created_at
FROM my_partitioned_table2
WHERE created_at >= '2022-07-01' AND created_at <
'2023-01-01';
INSERT 0 6
particion_con_datos=# \dt
                      List of relations
 Schema |               Name               | Type  |  Owner   
--------+----------------------------------+-------+----------
 public | my_partitioned_table2            | table | postgres
 public | my_partitioned_table_partition_1 | table | postgres
 public | my_partitioned_table_partition_2 | table | postgres
(3 rows)

particion_con_datos=# select * from my_partitioned_table2;
 id |  name   |     created_at      
----+---------+---------------------
  1 | luis    | 2022-06-30 00:00:00
  2 | anahi   | 2022-01-05 00:00:00
  3 | teresa  | 2022-02-07 00:00:00
  4 | alexis  | 2022-03-14 00:00:00
  5 | ximena  | 2022-04-22 00:00:00
  6 | andrea  | 2022-05-12 00:00:00
  7 | raul    | 2022-07-08 00:00:00
  8 | rodolfo | 2022-08-02 00:00:00
  9 | alondra | 2022-09-17 00:00:00
 10 | esteban | 2022-10-27 00:00:00
 11 | erick   | 2022-11-04 00:00:00
 12 | dulce   | 2022-12-13 00:00:00
  1 | luis    | 2022-06-30 00:00:00
  2 | anahi   | 2022-01-05 00:00:00
  3 | teresa  | 2022-02-07 00:00:00
  4 | alexis  | 2022-03-14 00:00:00
  5 | ximena  | 2022-04-22 00:00:00
  6 | andrea  | 2022-05-12 00:00:00
  7 | raul    | 2022-07-08 00:00:00
  8 | rodolfo | 2022-08-02 00:00:00
  9 | alondra | 2022-09-17 00:00:00
 10 | esteban | 2022-10-27 00:00:00
 11 | erick   | 2022-11-04 00:00:00
 12 | dulce   | 2022-12-13 00:00:00
(24 rows)

particion_con_datos=# select * from my_partitioned_table_partition_1;
 id |  name  |     created_at      
----+--------+---------------------
  1 | luis   | 2022-06-30 00:00:00
  2 | anahi  | 2022-01-05 00:00:00
  3 | teresa | 2022-02-07 00:00:00
  4 | alexis | 2022-03-14 00:00:00
  5 | ximena | 2022-04-22 00:00:00
  6 | andrea | 2022-05-12 00:00:00
(6 rows)

particion_con_datos=# select * from my_partitioned_table_partition_2;
 id |  name   |     created_at      
----+---------+---------------------
  7 | raul    | 2022-07-08 00:00:00
  8 | rodolfo | 2022-08-02 00:00:00
  9 | alondra | 2022-09-17 00:00:00
 10 | esteban | 2022-10-27 00:00:00
 11 | erick   | 2022-11-04 00:00:00
 12 | dulce   | 2022-12-13 00:00:00
(6 rows)

particion_con_datos=# delete from my_partitioned_table2;
DELETE 24
particion_con_datos=# \dt
                      List of relations
 Schema |               Name               | Type  |  Owner   
--------+----------------------------------+-------+----------
 public | my_partitioned_table2            | table | postgres
 public | my_partitioned_table_partition_1 | table | postgres
 public | my_partitioned_table_partition_2 | table | postgres
(3 rows)

particion_con_datos=# select count(*) from my_partitioned_table2;
 count 
-------
     0
(1 row)

particion_con_datos=# select count(*) from my_partitioned_table_partition_1;
 count 
-------
     0
(1 row)

particion_con_datos=# select count(*) from my_partitioned_table_partition_2;
 count 
-------
     0
(1 row)

particion_con_datos=# CREATE OR REPLACE FUNCTION partition_insert_trigger()
RETURNS TRIGGER AS $$
BEGIN
IF (NEW.created_at >= '2022-01-01' AND NEW.created_at < '2022-07-
01') THEN
INSERT INTO my_partitioned_table_partition_1 VALUES (NEW.*);
ELSIF (NEW.created_at >= '2022-07-01' AND NEW.created_at < '2023-
01-01') THEN
INSERT INTO my_partitioned_table_partition_2 VALUES (NEW.*);
ELSE
RAISE EXCEPTION 'Date out of range';
END IF;
RETURN NULL;
END;
$$ LANGUAGE plpgsql;
CREATE FUNCTION
particion_con_datos=# select count(*) from my_partitioned_table_partition_1;
 count 
-------
     0
(1 row)

particion_con_datos=# CREATE TRIGGER insert_trigger
BEFORE INSERT ON my_partitioned_table2
FOR EACH ROW EXECUTE FUNCTION
partition_insert_trigger();
CREATE TRIGGER
particion_con_datos=# select count(*) from my_partitioned_table_partition_2;
 count 
-------
     0
(1 row)

particion_con_datos=# 




